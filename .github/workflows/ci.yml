name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        # 如果有ESLint配置则运行
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npm run lint || echo "No lint script found"
        fi

    - name: Run tests
      run: npm test

    - name: Test Docker build
      if: matrix.node-version == '18'
      run: |
        docker build -t ppt2code:test .
        docker run --rm -d --name ppt2code-test -p 3001:3000 ppt2code:test
        sleep 30
        curl -f http://localhost:3001/ || exit 1
        docker stop ppt2code-test

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate

    - name: Check package.json format
      run: |
        if ! jq empty package.json; then
          echo "package.json is not valid JSON"
          exit 1
        fi

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ppt2code:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # 启动容器
        docker run -d --name ppt2code-test -p 3000:3000 ppt2code:test
        
        # 等待服务启动
        sleep 45
        
        # 测试健康检查
        docker exec ppt2code-test curl -f http://localhost:3000/ || exit 1
        
        # 清理
        docker stop ppt2code-test
        docker rm ppt2code-test
